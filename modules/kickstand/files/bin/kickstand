#! /usr/bin/env ruby

require 'rubygems'
require 'sinatra/base'
require 'webrick'
require 'resolv'
require "net/https"
require 'yaml'
require 'thread'
require 'socket'
require 'fileutils'
require 'pathname'

MASTERNAME  = 'master.puppetlabs.vm'            # The puppet master servicing this client
CERTNAME    = "agent-%s.student.puppetlabs.vm"  # pattern to use when generating a new certname
USERNAME    = 'student'                         # ssh user to use when calling the Rake API
GROUPS      = 'default'                         # The list of groups new nodes should belong to

SSLDIR      = '/etc/puppetlabs/puppet/ssl'      # Where the SSL certificates are stored
DOCROOT     = '/opt/kickstand/share'            # where templates and public files go
LOGFILE     = '/var/log/kickstand'
SERVERPORT  = 9090
PROVISIONER = Socket.gethostname                # The provisioning host (possibly different from master)

# If we are autosigning. Only works when provisioner is also the master
#AUTOSIGN   = '/etc/puppetlabs/puppet/autosign.conf' # path to puppetmaster's autosign.conf

opts = {
  :Port         => SERVERPORT,
  :Logger       => WEBrick::Log::new(LOGFILE, WEBrick::Log::DEBUG),
  :ServerType   => WEBrick::Daemon,
  :DocumentRoot => DOCROOT,
  :SSLEnable    => false,
}

class Server < Sinatra::Base
  set :root,   DOCROOT

  configure :production, :development do
    enable :logging

    # why do I have to do this? This page implies I shouldn't.
    # https://github.com/sinatra/sinatra#logging
    set :logger,    WEBrick::Log::new(LOGFILE, WEBrick::Log::DEBUG)
    set :semaphore, Mutex.new

    # keep track of nodes that are installing
    set :outstanding, []
  end

  get '/' do
    @certname       = sprintf(CERTNAME, guid())
    @kickstand_ip   = IPSocket.getaddress(Socket.gethostname)
    @kickstand_port = SERVERPORT
    @master_name    = MASTERNAME
    @master_ip      = Resolv.getaddress(MASTERNAME)

    # record the node starting up
    settings.outstanding.push @certname

    logger = settings.logger
    logger.debug '------------------------------------------------------------------'
    logger.debug "Generated new certname: #{@certname}"
    logger.debug "  Kickstand IP address: #{@kickstand_ip}"
    logger.debug "        Kickstand port: #{@kickstand_port}"
    logger.debug "    Puppet Server name: #{@master_name}"
    logger.debug "    Puppet Server port: #{@master_ip}"
    logger.debug "     Booting instances: #{settings.outstanding.inspect}"
    logger.debug '------------------------------------------------------------------'

    if defined? AUTOSIGN
      # write an entry into autosign.conf so the master signs the agent certificate
      logger.debug "Autosigning certificate: #{certname}"
      settings.semaphore.synchronize do
        File.open(AUTOSIGN, 'a') { |f| f.write("#{@certname}\n") }
      end
    end

    erb :kickstart
  end

  get '/postinstall/:certname' do |certname|
    # do we know about this certname?
    pass unless settings.outstanding.include? certname

    logger = settings.logger

    ###############################################
    # Sign the new agent certificate
    logger.debug "Signing certificate: #{certname}"
    certificate_status = ''



    ###############################################
    # Classify the new node in the console
    logger.debug "Classifying: #{certname}"
    classification_status = ''



    # remove certname from list of known booting instances
    settings.outstanding.delete(certname)
    # and return some sort of status message to the client
    "#{certificate_status}\n#{classification_status}"
  end

  # only needed so we can install ntpdate without network access
  get '/mirror.repo' do
    logger = settings.logger
    logger.debug "Serving mirror.repo to #{request.ip}"

    @serverip   = IPSocket.getaddress(Socket.gethostname)
    @serverport = SERVERPORT
    erb :mirror
  end

  not_found do
    halt 404, 'page not found'
  end

  helpers do
    def guid(length=4)
      # this is a terrifyingly simple GUID generator
      (0..length).to_a.map{|a| rand(16).to_s(16)}.join
    end
  end
end

Rack::Handler::WEBrick.run(Server, opts) do |server|
  [:INT, :TERM].each { |sig| trap(sig) { server.stop } }
end
